#!/usr/bin/env bash
#
# pybuild
#   - builds static or dynamically linked Python + OpenSSL
#   - always statically links libssl/libcrypto
#
# desc:
#   - script to configure and build python, make a tape archive
#   - last tested with python 3.12 line, openssl 3.0 line
#   - has some hardcoded paths, confined to variables
#
# args:
#   - arg1: whether to build 'static' or 'dynamic' interpreter
#
# scott@smemsh.net
# https://github.com/smemsh/utiladm/
# https://spdx.org/licenses/GPL-2.0
#

set -e
trap_err () { echo "$FUNCNAME: code $1, line: $2, cmd: \"$3\""; exit $1; }
trap 'trap_err $? $LINENO "$BASH_COMMAND"' ERR

relocroot=`mktemp -d`
trap_exit () { rm -rf ${relocroot:?}; }
trap trap_exit EXIT

set -o pipefail

[[ ${PWD##*/} == cpython ]]
[[ ${1:?} =~ ^(static|dynamic)$ ]]

buildtype=$1
ncpus=`nproc`
arch=`arch`
arch=${arch/x86_64/amd64}
arch=${arch/aarch64/arm64}

if source /etc/lsb-release &>/dev/null
then [[ $DISTRIB_ID == Ubuntu ]] &&
	osver=u${DISTRIB_RELEASE%.*}
else f=/etc/redhat-release; test -f $f &&
	osver=rhel$(awk '{FS = "."; $0 = $3; print $1}' $f)
fi
[[ $osver ]]

case $buildtype in
(static) pydirbase=/opt/pystatic;;
(dynamic) pydirbase=/opt/python;;
esac

ssldirbase=/opt/openssl
pkgdepot=~/tarbin

pyver=$(git describe --tags | awk -F ^v '{print $2}')
pydir=$pydirbase-$pyver

sslver=$(ls -1d $ssldirbase* | sort -rV | head -1 | awk -F - '{print $2}')
ssldir=$ssldirbase-$sslver

logtime=`date +%Y%m%d%H%M%S`
logstr=$buildtype-$pyver-$logtime

pkgbase=python-${pyver}_${buildtype}_staticssl-${sslver}_opt_${arch}_${osver}

buildwatch ()
{
	if [[ $DEBUG == 1 ]]; then cat; return; fi
	pv -bntl 2>&1 >|${1:?}-$logstr.log | while read secs lines
	do printf "%s\t\t\r" "$1: ${lines} lines in ${secs%.*}s"
	done; echo
	ln -nsf $1-$logstr.log $1.log
}

configure ()
{
	env_static=(
		LDFLAGS="'-static -static-libgcc'"
		CFLAGS=-fPIC
		LDSHARED=gcc
		LINKFORSHARED=
	)
	env_dynamic=()
	env_common=()
	declare -n envref=env_$buildtype

	###

	conf_common=(
		--prefix=$pydir
		--with-openssl=$ssldir
		--with-ensurepip=install
		--with-static-libpython
		--with-lto=full
		--enable-optimizations
		--disable-ipv6
		--disable-shared
		--disable-test-modules
	)
	conf_dynamic=(
		--enable-loadable-sqlite-extensions
	)
	conf_static=()
	declare -n confref=conf_$buildtype

	###

	eval \
		"${env_common[@]}" "${envref[@]}" \
		./configure \
		"${conf_common[@]}" "${confref[@]}" \
	|& buildwatch configure

	cp config.log config-$logstr.log
}

setup ()
{
	local libdir slib
	for libdir in lib{,64}
	do if test -d $ssldir/$libdir; then slib=$libdir; break; fi; done
	[[ $slib ]]

	local ncinc=-I/usr/include/ncursesw  # for ncurses <= 5

	sslinc=(
		-I$ssldir/include
		-L$ssldir/$slib
	)
	sslrule=(
		_ssl{,.c}
		${sslinc[@]}
		-l:libssl.a -Wl,--exclude-libs,libssl.a
		-l:libcrypto.a -Wl,--exclude-libs,libcrypto.a
		-l:libz.a -Wl,--exclude-libs,libz.a
	)
	hashlibrule=(
		_hash{lib,openssl.c}
		${sslinc[@]}
		-l:libcrypto.a -Wl,--exclude-libs,libcrypto.a
		-l:libz.a -Wl,--exclude-libs,libz.a
	)
	sqlite3rule=(
		_sqlite3
		$(cd Modules; echo _sqlite/*.c)
		-l:libsqlite3.a
	)

	###

	rules_static=(
		-e '0,/^\*shared\*$/s,shared,static,'
		-e '/^_hashlib/a\' -e "${sqlite3rule[*]}"
		-e '/^\*shared\*$/d'
	)
	rules_common=(
		-e '/^nis\>/d'
		-e '/^_uuid\>/s,(-luuid),-I/usr/include/uuid \1,'
		-e '/^readline\>/s,termcap,tinfo,'
		-e "s%^_ssl\\>.*%${sslrule[*]}%"
		-e "s%^_hashlib\\>.*%${hashlibrule[*]}%"
		-e '/^_tkinter\>/d'
		-e '/^_curses\>/s,(-lncurses).*-ltermcap,'$ncinc' \1w -ltinfo,'
		-e '/^_curses_panel\>/s,(-lpanel),'$ncinc' \1w,'
		-e '/^_curses_panel\>/s,(-lncurses),\1w -ltinfo,'
		-e '/^_test/d'
		-e '/^\*disabled\*$/a\' -e 'nis\n_tkinter\nspwd'
		#-e "s,^(_testcapi\\>.*),\\1 $(echo _testcapi/*.c),"
		#-e '/^_testsinglephase\>/a\'
		#-e '_testclinic _testclinic.c'
	)
	rules_dynamic=(
		-e '/^_typing\>/d'
	)
	declare -n rulesref=rules_$buildtype

	###

	cd Modules
	sed -n -r 's/^#([a-z_\*].*)$/\1/p' Setup >| Setup.local
	[[ $DEBUG == 1 ]] && set -x
	sed -i -r "${rulesref[@]}" "${rules_common[@]}" Setup.local
	set +x
	cp Setup.local Setup-$logstr.local
	cd ..
}

build ()
{
	make -j$ncpus \
	|& buildwatch build
}

package ()
{
	mkdir $relocroot

	make DESTDIR=$relocroot install \
	|& buildwatch install

	tar -C $relocroot \
		-cvaf $pkgdepot/$pkgbase.tar.zst \
		--owner=0 --group=0 \
		opt \
	|& buildwatch package
}

main ()
{
	printf "building $buildtype python: $pyver, "
	printf "openssl: $sslver, "
	printf "cores: $ncpus"
	echo

	printf cleanup...
	make distclean &>/dev/null || true
	echo done

	configure
	setup
	build
	package

	echo "build completed in ${SECONDS}s"
}

main "$@"
